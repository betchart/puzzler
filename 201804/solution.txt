Total quarters in pot at beginning: P0

Day   Quarters Given	Remaining pot
1     Q1 = 1+(P0-1)/7	P1 = P0 - Q1
2     Q2 = 2+(P1-2)/7	P2 = P1 - Q2
3     Q3 = 3+(P2-3)/7	P3 = P2	- Q3
...
n-1   Q[n-1] = (n-1)+(P[n-2]-(n-1))/7	P[n-1] = P[n-2] - Q[n-1]
n     Q[n] = n          P[n] = P[n-1]-Q[n] = 0


Reverse the recursive formula

Day	Remaining Pot, Quarters recovered
n	P[n] = 0       Q[n] = n
n-1	P[n-1] = n     Q[n-1] = P[n-1]/6 + (n-1)
n-2	P[n-2] = P[n-1] + Q[n-1]     Q[n-2] = P[n-2]/6 + (n-2)
...
3	P[3] = P[4] + Q[4]	Q[3] = P[3]/6 + 3
2	P[2] = P[3] + Q[3]	Q[2] = P[2]/6 + 2
1	P[1] = P[2] + Q[2]	Q[1] = P[1]/6 + 1
0	P[0] = P[1] + Q[1]


def pot_previous(n, potn):
    if n==0:
       return potn
     if not potn%6: return None
     return pot_previous(n-1, n + potn*7/6)


